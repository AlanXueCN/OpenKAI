#!/bin/bash

# TX1 setup script for use as companion computer

# connect TX1 via USB to Ubuntu machine and put TX1 into bootloader mode:
#    Hold Force Recovery button (aka "REC"), press Reset button(aka "RST"), Release Force Recovery button
#    On Ubuntu machine "lsusb", and look for "NVidia Corp"
# Install JetPack on an Ubuntu machine, while connected to the internet:
# run JetPack-L4T-2.1-linux-x64.run
#    select Jetson TX1 Development Kit and Ubuntu Host
#    On JetPack L4T Component Manager:
#        - Custom
#        * Common: no action
#        * For Jetson TX1: mixed
#           * VisionWorks on Host: no action
#           * OpenCV for Tegra on Ubunutu 14.04: no action
#           * Linux for Tegra (TX1): install
#           * CUDA Toolkit for Ubuntu 14.04: install
#        * Post Install: mixed
#           * Flash OS: install
#           * CUDA Toolkit for L4T: install
#           * Compile GameWorks Samples: no action
#           * Compile CUDA Samples: no action
#           * PerfKit: install
#           * cuDNN Package: install
#           * OpenCV for Tegra: no action
#        * VisionWorks on TX1 Target: no action
#    Click Next, and Accept All
#    On "Network Layout" select "Device accesses Internet via router/switch", Next
#    Select network adapter to use to connect to TX (i.e. eth0 if your Ubuntu machine uses eth0 to access your local internet)
#    Follow instructions to put TX1 into bootloader mode (i.e. Hold Force Recovery button, etc), Press <Enter>
#    Click Next again, on "Device information" enter IP address and ubuntu/ubuntu for user/password

# setup as desktop
# login to TX1 as username/password: ubuntu/ubuntu and setup to start to desktop
# these instructions are printed on the screen after logging in
cd ${HOME}/NVIDIA-INSTALLER
sudo ./installer.sh  # and enter password 'ubuntu'
sudo reboot now #reboot to switch into desktop mode

# remove modemmanager
sudo apt-get purge modemmanager

# update package info
sudo apt-get update

# install python, numpy, pip
sudo apt-get install python-dev python-numpy python3-numpy python-pip python-opencv

# install dronekit
sudo pip install dronekit dronekit-sitl # also installs pymavlink
#sudo apt-get install screen python-wxgtk2.8 python-matplotlib python-opencv python-pip python-numpy python-dev libxml2-dev libxslt-dev
sudo pip install mavproxy

# live video related packages
sudo apt-get install gstreamer1.0

# install git
sudo apt-get install git

# install boost & caffe (see http://caffe.berkeleyvision.org/install_apt.html)
sudo apt-get install libboost-all-dev
sudo apt-get install libprotobuf-dev libleveldb-dev libsnappy-dev libopencv-dev libhdf5-serial-dev protobuf-compiler
sudo apt-get install libatlas-base-dev
sudo apt-get install libgflags-dev libgoogle-glog-dev liblmdb-dev
mkdir ${HOME}/src
cd ${HOME}/src
git clone https://github.com/BVLC/caffe.git
cd caffe
cp Makefile.config.example Makefile.config
# USE_CUDNN := 1
# USE_OPENCV := 1
# OPENCV_VERSION := 3
# CUDA_ARCH := -gencode arch=compute_53, code=sm53
protoc src/caffe/proto/caffe.proto --cpp_out=.
mkdir include/caffe/proto
mv src/caffe/proto/caffe.pb.h include/caffe
sudo make clean
sudo make all -j4

# install opencv source, opencv_contrib
cd ${HOME}/src
git clone https://github.com/Itseez/opencv.git
git clone https://github.com/Itseez/opencv_contrib.git

# opencv 3 install see http://elinux.org/Jetson/Installing_OpenCV, "Natively compiling the OpenCV library from source onboard the device"
sudo apt-add-repository universe
sudo apt-get update
# Some general development libraries
sudo apt-get -y install build-essential make cmake cmake-curses-gui g++
# libav video input/output development libraries
sudo apt-get -y install libavformat-dev libavutil-dev libswscale-dev
# Video4Linux camera development libraries
sudo apt-get -y install libv4l-dev
# Eigen3 math development libraries
sudo apt-get -y install libeigen3-dev
# GTK development libraries (to allow creating graphical windows)
sudo apt-get -y install libgtk2.0-dev
# download and unzip OpenCV3.1 source
cd ${HOME}/Downloads
wget https://github.com/Itseez/opencv/archive/3.1.0.zip
# make a directory for the source code and unzip there
unzip ${HOME}/Downloads/3.1.0.zip -d ${HOME}/src
cd ${HOME}/src/opencv-3.1.0
mkdir build
cd build
ccmake .. #press "c" to configure
          # ENABLE_NEON = ON
          # WITH_GTK_2_X = ON
          # WITH_LIBV4L = ON
          # OPENCV_EXTRA_MODULES = /home/ubuntu/src/opencv_contrib/modules
          # press c twice, then "g"

make -j4
sudo make install
sudo ldconfig

# install OpenKai
cd ${HOME}/src
git clone https://github.com/yankailab/OpenKAI.git

# setup wifi access point.
# NOTE: if something goes wrong with this setup, and you are unable to connect to the TX1, connect a keyboard and mouse and type "sudo dhclient eth0"
sudo apt-get install hostapd dnsmasq haveged
# 
# disable network manager
# echo "manual" | sudo tee /etc/init/network-manager.override
# sudo mv /etc/init/network-manager.conf /etc/init/network-manager.conf.bak

sudo vi /etc/modprobe.d/bcmdhd.conf # add what's below to end of file
    options bcmdhd op_mode=2

# modify /etc/default/hostapd to use our config file
sudo vi /etc/default/hostapd # modify line to look like below
    DAEMON_CONF="/etc/hostapd/hostapd.conf"

# create our hostapd config file
sudo vi /etc/hostapd/hostapd.conf #add what's below
    auth_algs=1
    beacon_int=50
    channel=3
    country_code=US
    disassoc_low_ack=1
    driver=nl80211
    hw_mode=g
    #ht_capab=[SHORT-GI-40]
    ieee80211d=1
    ieee80211n=1
    interface=wlan0
    require_ht=0
    rsn_pairwise=CCMP
    ssid=enroute-drone1
    wmm_enabled=1
    wpa=2
    wpa_key_mgmt=WPA-PSK
    wpa_passphrase=enroute1024

# modify /etc/dnsmasq.conf to look like below
sudo vi /etc/dnsmasq.conf
    interface=wlan0
    dhcp-range=10.0.1.128,10.0.1.254,12h

# disable NetworkManager so it does not interfere
sudo vi /etc/init/network-manager.override # add just the line below
    manual

# create /etc/rc.local file to automatically start hostapd on each reboot
sudo vi /etc/rc.local # add the contents like below
    #!/bin/sh
    PATH=/sbin:/usr/sbin:/usr/bin:/bin:$PATH
    dhclient eth0
    ifconfig wlan0 10.0.1.1/24 up
    /etc/init.d/hostapd start
    service dnsmasq force-reload
# make sure /etc/rc.local is executable
chmod a+x /etc/rc.local

# turn off TX1 USB auto suspend, add the following line before exit 0 of /etc/rc.local
echo -1 > /sys/module/usbcore/parameters/autosuspend

# remove this file which stores old LAN MAC addresses
sudo rm /etc/udev/rules.d/70-persistent-net.rules
# create a new fules file that doesn't store the MAC addresses (see http://askubuntu.com/questions/240632/how-to-disable-udev-net-rule-generation)
sudo vi /etc/udev/rules.d/75-persistent-net.rules # make the file look like below
    # this disables network device rule generation
    SUBSYSTEM=="net", DRIVERS=="?*", NAME="%k"

# remove ttyS0 startup file so that it does not interfere with ttyS0 serial comms to pixhawk
sudo rm /etc/init/ttyS0.conf
# remove ttyS0 from /boot/extlinux/extlinux.conf.  Make the APPEND line look like below
    APPEND fbcon=map:0 console=tty0,115200n8 androidboot.modem=none ..etc..

# enable log compression
sudo vi /etc/logrotate.conf # find rotate and compress lines and make them look like below
    rotate 1
    compress

# auto start mavproxy
sudo apt-get install screen
cd $HOME
mkdir start_mavproxy
cd start_mavproxy
vi start_mavproxy.sh
    #!/bin/sh
    mavproxy.py --master /dev/ttyS0 --baud 921600 --out udpin:localhost:9000 --out udpbcast:10.0.1.255:14550
vi autostart_mavproxy.sh
    #!/bin/bash
    # autostart for mavproxy on TX1
    (
    date
    export PATH=$PATH:/bin:/sbin:/usr/bin:/usr/local/bin
    export HOME=/home/ubuntu
    cd $HOME/start_mavproxy
    screen -d -m -S MAVProxy -s /bin/bash $HOME/start_mavproxy/start_mavproxy.sh
    ) > $HOME/start_mavproxy/start_mavproxy.log 2>&1
    exit 0
# add line below to bottom of /etc/rc.local to call $HOME/start_mavproxy/autostart_mavproxy.sh
    # start mavproxy
    sudo -H -u ubuntu /bin/bash -c '/home/ubuntu/start_mavproxy/autostart_mavproxy.sh'

# setup live video via http (complements of Krita from NII)
# install and build http-launch
sudo apt-get install git build-essential dpkg-dev flex bison autoconf autotools-dev automake liborc-dev autopoint libtool gtk-doc-tools libgstreamer1.0-dev
cd $HOME/src
git clone https://github.com/sdroege/http-launch
cd http-launch
export PKG_CONFIG_PATH=/home/ubuntu/src/http-launch/out/lib/pkgconfig
./autogen.sh
./configure --prefix=/home/ubuntu/src/http-launch/out
make
make install

# create live startup scripts
cd $HOME
mkdir start_video
cd start_video
vi start_http_video.sh
    # launch http based live video
    $HOME/src/http-launch/out/bin/http-launch 1234 v4l2src device=/dev/video0 ! "video/x-raw,width=640,height=480,framerate=15/1" ! jpegenc ! multipartmux streamable=true name=stream
chmod a+x start_http_video.sh
vi autostart_video.sh
    #!/bin/bash
    # autostart for streaming video on TX1
    (
    date
    export PATH=$PATH:/bin:/sbin:/usr/bin:/usr/local/bin
    export HOME=/home/ubuntu
    cd $HOME/start_video
    screen -d -m -S HttpVideo -s /bin/bash $HOME/start_video/start_http_video.sh
    ) > $HOME/start_video/start_http_video.log 2>&1
    exit 0
chmod a+x autostart_video.sh
sudo vi /etc/rc.local # add what's below to the bottom
    # start streaming video
    sudo -H -u ubuntu /bin/bash -c '/home/ubuntu/start_video/autostart_video.sh'
